// <auto-generated />
using System;
using Infrastructure.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220204012733_ConstantDataCreate")]
    partial class ConstantDataCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Constants.CarType", b =>
                {
                    b.Property<int>("CarTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarTypeId");

                    b.ToTable("CarTypes");

                    b.HasData(
                        new
                        {
                            CarTypeId = 1,
                            Name = "Sedan"
                        },
                        new
                        {
                            CarTypeId = 2,
                            Name = "Coupe"
                        },
                        new
                        {
                            CarTypeId = 3,
                            Name = "SUV"
                        },
                        new
                        {
                            CarTypeId = 4,
                            Name = "Minivan"
                        },
                        new
                        {
                            CarTypeId = 5,
                            Name = "Cabriolet"
                        },
                        new
                        {
                            CarTypeId = 6,
                            Name = "Small Car"
                        },
                        new
                        {
                            CarTypeId = 7,
                            Name = "Limousine"
                        });
                });

            modelBuilder.Entity("Domain.Constants.FuelType", b =>
                {
                    b.Property<int>("FuelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelTypeId"), 1L, 1);

                    b.Property<string>("FuelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FuelTypeId");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            FuelTypeId = 1,
                            FuelName = "Petrol"
                        },
                        new
                        {
                            FuelTypeId = 2,
                            FuelName = "Diesel"
                        },
                        new
                        {
                            FuelTypeId = 3,
                            FuelName = "Hybrid"
                        },
                        new
                        {
                            FuelTypeId = 4,
                            FuelName = "Electric"
                        },
                        new
                        {
                            FuelTypeId = 5,
                            FuelName = "Gas"
                        });
                });

            modelBuilder.Entity("Domain.Constants.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            LocationName = "Tbilisi"
                        },
                        new
                        {
                            LocationId = 2,
                            LocationName = "Batumi"
                        },
                        new
                        {
                            LocationId = 3,
                            LocationName = "Kutaisi"
                        },
                        new
                        {
                            LocationId = 4,
                            LocationName = "Rustavi"
                        },
                        new
                        {
                            LocationId = 5,
                            LocationName = "Telavi"
                        },
                        new
                        {
                            LocationId = 6,
                            LocationName = "Zestafoni"
                        },
                        new
                        {
                            LocationId = 7,
                            LocationName = "Gori"
                        },
                        new
                        {
                            LocationId = 8,
                            LocationName = "Khashuri"
                        },
                        new
                        {
                            LocationId = 9,
                            LocationName = "Poti"
                        },
                        new
                        {
                            LocationId = 10,
                            LocationName = "Qobuleti"
                        });
                });

            modelBuilder.Entity("Domain.Constants.TransmissionType", b =>
                {
                    b.Property<int>("TransmissionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransmissionTypeId"), 1L, 1);

                    b.Property<string>("TransmissionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransmissionTypeId");

                    b.ToTable("TransmissionTypes");

                    b.HasData(
                        new
                        {
                            TransmissionTypeId = 1,
                            TransmissionName = "Manual"
                        },
                        new
                        {
                            TransmissionTypeId = 2,
                            TransmissionName = "Automatic"
                        },
                        new
                        {
                            TransmissionTypeId = 3,
                            TransmissionName = "Semi-Automatic"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CarAd", b =>
                {
                    b.Property<int>("CarAdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarAdId"), 1L, 1);

                    b.Property<DateTimeOffset>("AdCreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("Auction")
                        .HasColumnType("bit");

                    b.Property<bool?>("Camera")
                        .HasColumnType("bit");

                    b.Property<bool?>("ClimateControl")
                        .HasColumnType("bit");

                    b.Property<bool>("CustomsDuty")
                        .HasColumnType("bit");

                    b.Property<bool?>("ElectricWindows")
                        .HasColumnType("bit");

                    b.Property<double?>("EngineCapacity")
                        .HasColumnType("float");

                    b.Property<int?>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Mileage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<bool?>("Navigation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ParkingControl")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("RightHandWheel")
                        .HasColumnType("bit");

                    b.Property<bool?>("SeatHeating")
                        .HasColumnType("bit");

                    b.Property<bool?>("TechnicalInspection")
                        .HasColumnType("bit");

                    b.Property<int?>("TransmissionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("CarAdId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ModelId");

                    b.HasIndex("TransmissionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CarAds");
                });

            modelBuilder.Entity("Domain.Entities.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"), 1L, 1);

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"), 1L, 1);

                    b.Property<int>("CarTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModelId");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.CarAd", b =>
                {
                    b.HasOne("Domain.Constants.FuelType", "FuelType")
                        .WithMany("CarAds")
                        .HasForeignKey("FuelTypeId");

                    b.HasOne("Domain.Constants.Location", "Location")
                        .WithMany("CarAds")
                        .HasForeignKey("LocationId");

                    b.HasOne("Domain.Entities.Model", "Model")
                        .WithMany("CarAds")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Constants.TransmissionType", "TransmissionType")
                        .WithMany("CarAds")
                        .HasForeignKey("TransmissionTypeId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("CarAds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelType");

                    b.Navigation("Location");

                    b.Navigation("Model");

                    b.Navigation("TransmissionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.HasOne("Domain.Constants.CarType", "CarType")
                        .WithMany("Models")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Models")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Domain.Constants.CarType", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Domain.Constants.FuelType", b =>
                {
                    b.Navigation("CarAds");
                });

            modelBuilder.Entity("Domain.Constants.Location", b =>
                {
                    b.Navigation("CarAds");
                });

            modelBuilder.Entity("Domain.Constants.TransmissionType", b =>
                {
                    b.Navigation("CarAds");
                });

            modelBuilder.Entity("Domain.Entities.Manufacturer", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Navigation("CarAds");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("CarAds");
                });
#pragma warning restore 612, 618
        }
    }
}
